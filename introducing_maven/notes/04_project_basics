-----------------------------------------------------------------------
|  CHAPTER 4 - MAVEN PROJECT BASICS                                   |
-----------------------------------------------------------------------

- Standard Maven Project Structure

    > gswm
        > src
            > main
                > java
            > test
                > java
        > target
        - LICENSE.txt
        - NOTICE.txt
        - README.txt
        - pom.xml


    - The 'gswm' is the project root folder.  Typically, it matches the name of the 
        generated artifact.


    - The 'target' holds generated artifacts, such as the .class files.  This folder is
        typically not stored in source control.



- Other Files in /src

    src/main/resources          

      Holds resources such as templates that need to end up in the generated artifact.

    src/main/config

      Holds config files.  Will not end up in generated artifact.

    src/main/scripts

      Holds any scripts needed for the application.

    src/test/resources

      Holds config files needed for testing.

    src/main/webapp

      Holds web assets such as .jsp files, CSS, and images.

    src/it

      Holds integration tests.

    src/main/db

      Holds data files such as SQL scripts.

    src/site

      Holds files required during the generation of the project site.



- Creating a New Project

    - Create the project:

        $ mkdir gswm

        $ cd gswm
        $ touch pom.xml
        $ mkdir src
        $ mkdir src/main
        $ mkdir src/main/java


    - Next, we add the 'pom.xml'.


    - The convention for Maven versioning is:

        <major-version>.<minor-version>.<incremental-version>-qualifier


    - The options for qualifier include 'RC', 'alpha', 'beta', and 'SNAPSHOT'.
    
      The 'SNAPSHOT' qualifier indicates that the project is in development stage.  Every
        time the project is built, Maven will fetch the latest version.



- Building a Project

    - To start, we'll add a class to the code.

        # gswm/src/main/java/HelloWorld.java
        ----------------------------------------------
        public class HelloWorld {
            public void sayHello() {
                System.out.println("Hello World");
            }
        }


    - Now, let's build the application.

        $ cd gswm
        $ mvn package


    - We'll see that Maven compiled the code and packaged it into a JAR file.

        gswm/target/gswm-1.0.0-SNAPSHOT.jar



- Testing the Project

    - Now, let's add a test for our project.  First, we need to add Junit to our
        dependencies.

        # pom.xml
        ----------------------------------------
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>
        </dependencies>


    - Now, we can check to make sure our dependency is included:

        $ mvn dependency:tree


    - Next, we'll add a simple JUnit test.

        # gswm/src/test/java/HelloWorldTest.java


    - Now, we run the tests as part of the building process.

        $ mvn package