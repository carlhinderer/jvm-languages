-----------------------------------------------------------------------
|  CHAPTER 3 - MAVEN DEPENDENCY MANAGEMENT                            |
-----------------------------------------------------------------------

- The Maven Central Repository

    - You could just download the JARs you need, and put them in your project's lib 
        folder or add them to the class path.  However, there are several problems
        with this approach:

        1. The JAR files will have dependencies, which you will have to download also.

        2. To upgrade the JAR file, you'll have to start all over again.

        3. You'll need to add them to source control, increasing the project size.

        4. Sharing JARs across the organization becomes difficult.


    - To address these problems, Maven provides declarative dependency management.
        You declare your dependencies in an external file called 'pom.xml', and Maven
        will automatically download them into your project for building, testing, or
        packaging.


    - The default repo is called Maven Central, and is located at 'repo.maven.apache.org'.


    - After downloading the package, on subsequent runs, Maven will look for the artifact
        in its local repo before downloading it.



- Internal Repository Managers

    - In an enterprise context, you won't want to publish your repos to Maven Central.  
        So, you can use an internal repository manager that can get repos from Maven and 
        also get packages from your local repo.


    - There are several open source repo managers commonly used:

        - Nexus Repository OSS
        - Apache Archiva
        - Artifactory Open Service



- Using New Repositories

    - You can put repository information in either 'settings.xml' or 'pom.xml'.  Putting 
        them in the 'pom.xml' makes your builds portable, but if the repository URLs
        change, it will have to be updated.  Putting them in 'settings.xml' solves this
        problem.


        # settings.xml
        --------------------------
        <profiles>
            <profile>
                <id>your_company</id>
                <repositories>
                    <repository>
                        <id>spring_repo</id>
                        <url>http://repo.spring.io/release/</url>
                    </repository>
                    <repository>
                        <id>jboss_repo</id>
                        <url>https://repository.jboss.org/</url>
                    </repository>
                </repositories>
            </profile>
        </profiles>
        <activeProfiles>
            <activeProfile>your_company</activeProfile>
        </activeProfiles>



- Dependency Identification

    - Maven dependencies are typically archives such as JAR, WAR, EAR, or ZIP.  They
        are defined by these attributes:

        groupId      The organization or group responsible for the project

        artifactId   Identifier of the artifact being generated by the project

        version      Version number of the project

        type         Packing (JAR, WAR, EAR)


    - Here is a dependency:

        <dependencies>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-tools</artifactId>
                <version>5.4.2.Final</version>
            </dependency>
        </dependencies>



- Transitive Dependencies

    - Dependencies in your 'pom.xml' often have their own dependencies.  These are called
        'transitive dependencies'.  Maven will deal with these automatically and include
        them in your project.


    - Transitive dependencies may cause problems, since they might end up pulling unwanted
        JAR files or older versions.  Maven includes a handy plug-in that allows you to
        visualize the dependency tree.

        $ mvn dependency:tree


    - There are some times when you don't want to include certain transitive dependency JARs
        in the final archive.  The 'excludes' tag is used for this.

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest</artifactId>
                </exclusion>
            </exclusions>
        </dependency>



- Dependency Scope

    - You only need some JARs in certain contexts.  For instance, you only need JUnit
        when your tests are run.  


    - Maven provides these 6 scopes:

        compile

          This is the default scope.  Dependencies in this scope are available in
            all the class path in all phases - build, test, and run.

        provided

          Classes are available in the class path during the build and test phases.  Don't 
            get bundled with the generated artifact.

        runtime

          Not available in the class path during the building phase.  Instead, they are
            bundled with the artifact and are available during runtime.          

        test

          Available only during the test phase.

        system

          Similar to the 'provided' scope, except dependencies are not retrieved from
            the repository.  Instead, a hard-coded path to the file system is specified.

        import

          This scope is availble for '.pom' file dependencies only.  It allows you to 
            include dependency management information for a remote .pom file.



- Manual Dependency Installation

    - Sometimes, you may need to add an archive from your local repository.  For instance,
        if you are waiting for sysadmins to add it to the internal repo.

        $ mvn install:install-file -DgroupId=com.apress.gswmbook \
                                   -DartifactId=test \
                                   -Dversion=1.0.0 \
                                   -Dfile=/apress/gswm-book/chapter3/test.jar \
                                   -Dpackaging=jar \
                                   -DgeneratePom=true