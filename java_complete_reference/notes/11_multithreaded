-----------------------------------------------------------------------
|  CHAPTER 11 - MULTITHREADED PROGRAMMING                             |
-----------------------------------------------------------------------

- Process-Based vs Thread-Based Multitasking

    - Processes are heavyweight tasks that require their own separate address spaces.
        IPC is expensive and limited.  Context switching between processes is also
        costly.


    - Threads are lightweight.  They share the same address space.  Interthread
        communication is inexpensive, and context switching between threads is lower
        in cost.


    - Multithreading helps reduce the idle time spent waiting for I/O.



- The Java Thread Model

    - In a single-core system, concurrently executing threads share the CPU, but they are
        not actually running at the same time.

      In a multi-core system, it is possible for 2 or more threads to actually execute
        simultaneously.


    - In addition to the traditional multithreading capabilities described here, Java also
        has the 'Fork/Join' framework which supports parallel programming.  Parallel
        programming is a set of techniques that optimizes parallel execution in multicore
        systems.


    - Threads can be in the following states:

        - Running
        - Ready to Run (as soon as it gets CPU time)
        - Suspended (activity is temporarily halted)
        - Resumed (allows it to pick up where it left off)
        - Blocked (waiting for some resource)
        - Terminated (cannot be resumed)



- Thread Priorities

    - Java assigns an integer value for the priority of each thread.  A thread's priority
        is used to decide when to context switch from one running thread to the next.


    - The rules for deciding when to context switch are simple:

        1. A thread can voluntarily relinquish control.  This occurs when explicitly yielding,
             sleeping, or when blocked.  In this scenario, all other threads are examined,
             and the highest-priority thread is given the CPU.

        2. A thread can be pre-empted by a higher priority thread.  As soon as a higher-priority
             thread wants to run, it does.  This is called 'preemptive multitasking'.



- Synchronization

    - If two threads want to communicate and share a data structure, you need some way to ensure
        they don't conflict with each other.  For this purpose, Java uses an old model of IPC
        called a 'monitor'.  


    - A monitor is like a box that can only hold one thread.  Once a thread enters a monitor, all
        threads must wait until that thread exits the monitor.


    - In Java, there is no 'Monitor' class.  Instead, each object has its own implicit monitor
        that is automatically entered when one of the object's synchronized methods is called.
        Once a thread is inside that method, no other thread can call any other synchronized 
        method on the same object.



- The Thread Class and the Runnable Interface

    - Java's multithreading system is built on the 'Thread' class, its methods, and its
        companion interface, 'Runnable'.  To create a new thread, your program will either
        extend 'Thread' or implement 'Runnable'.


    - Here are some of the Thread class methods:

        Method           Meaning
        -----------------------------------------------
        getName          Obtain a thread's name

        getPriority      Obtain a thread's priority

        isAlive          Determines whether thread is still running

        join             Wait for a thread to terminate

        run              Entry point for the thread

        sleep            Suspend a thread for a period of time



- The Main Thread

    - When a Java program starts up, one thread begins running immediately.  This is called
        the 'main thread' of your program.  It is the main thread from which 'child' threads
        will be spawned.  It is also usually the last thread to exit, since it performs
        various shutdown activities.


    - It is created automatically when your program is started, and it can be controlled 
        through a 'Thread' object by called 'currentThread()', which is a public static
        member of Thread.

        static Thread currentThread()


    - Here is an example:

        class CurrentThreadDemo {
            public static void main(String args[]) {
                Thread t = Thread.currentThread();
                System.out.println("Current thread: " + t);
        
                // Change the thread name
                t.setName("My thread");
                System.out.println("After name change: " + t);
        
                try {
                    for (int n=5; n>0; n--) {
                        System.out.println(n);
                        Thread.sleep(1000);
                    }
                }
                catch (InterruptedException e) {
                    System.out.println("Main thread interrupted.");
                }
            }
        }

        // Output
        Current thread: Thread[main,5,main]           // [Name, Priority, Group]
        After name change: Thread[My Thread,5,main]
        5
        4
        3
        2
        1


    - The 'sleep()' method causes the thread from which it is called to suspend execution
        for a specified number of milliseconds.

        static void sleep(long milliseconds) throws InterruptedException

      There is also another form that can be used if you want to specify the time in 
        nanoseconds:

        static void sleep(long milliseconds, int nanoseconds) throwsInterruptedException


    - To get and set the thread name:

        final void setName(String threadName)
        final String getName()



- Implementing Runnable

    - The easiest way to create a thread is to create a class that implements the 'Runnable'
        interface.  To implement it, you just need a single method called 'run()'.

        public void run()


    - The 'run()' method establishes the entry point for another, concurrent thread of execution
        within your program.  This thread will end when 'run()' returns.


    - After you create a class that implements 'Runnable', you will instantiate an object of
        type 'Thread' from within that class.  Thread defines several constructors.  This is the
        one we'll use here:

        Thread(Runnable threadOb, String threadName)

      After the thread is created, it will not start running until you call its 'start()' method.

        void start()


    - An example of this is located in '/code/ch11/NewThreadDemo.java'.



- Extending Thread

    - The second way to create a thread is to create a new class that extends Thread, and
        then create an instance of that class.  The extending class must override the
        'run()' method, which is the entry point for the new thread.  As before, 'start()'
        begins execution of the new thread.


    - An example of this is located in '/code/ch11/ExtendThreadDemo.java'.


    - As a rule, if you need to override methods of 'Thread' besides 'run()', you should
        override Thread.  If all you need to do is run the thread, just implement the
        'Runnable' interface.



- Creating Multiple Threads

    - An example of a program that creates 3 child threads is located in 
        '/code/ch11/MultiThreadDemo.java'.



- Using isAlive() and join()

    - We will often want the main thread to finish last.  But how can one thread know that
        another has ended?  There are 2 ways:

        1. Call isAlive() on the thread, which will determine whether it is still running.

            final boolean isAlive()

        2. Wait for the thread to finish using join().

            final void join() throws InterruptedException


    - An example of using these methods is located in '/code/ch11/JoinDemo.java'.



- Thread Priorities

    - You can set the priority of a thread.  However, be aware that the scheduling 
        implementation of the platform your program is running on will also have a large
        effect on how threads are scheduled.  

        final void setPriority (int level)
        final int getPriority


    - A higher-priority thread can preempt a lower-priority one.  For safety, a thread 
        should occasionally yield to equal-priority threads, so it doesn't dominate the
        CPU.


    - When setting the priority, it must be a value between 'MIN_PRIORITY' and 'MAX_PRIORITY'
        (usually 1-10).  To return a thread to the default, use 'NORM_PRIORITY'.  These 
        constants are defined in 'Thread'.



- Synchronization

    - When 2 or more threads need access to a shared resource, the need some way to ensure
        a resource will only be used by one thread at a time.  This process is called
        'synchronization'.  Java provides language-level support for it.


    - A 'monitor' is an object that is used as a mutually exclusive (mutex) lock.  Only one
        thread can own a monitor at a given time.  

      When a thread acquires a lock, it has 'entered' the monitor.  All other threads attempting 
        to enter the locked monitor will be suspended until the first thread 'exits' the monitor.
        All other threads are 'waiting' for the monitor during this time.



- Using Synchronized Methods

    - To enter an object's monitor, we just call a method that has been modified with the
        'synchronized' keyword.

        class CallMe {
            synchronized void call (String msg) {
                ...
            }
        }


    - If we don't use the monitor, a race condition will occur, and the threads will interfere
        with each others' calls to the method, and the output will be mixed up.


    - There are examples of this in 'code/ch11/NotSynchronized.java' (example of race conditions)
        and 'code/ch11/Synchronized.java' (example of using synchronized method).



- The 'synchronized' Statement

    - You may be interiting from a class that does not use synchronized methods, and you may
        not have access to the source code.  So, you cannot declare the methods synchronized.
        To get around this problem, you can put calls to methods inside a 'synchronized' block.

        synchronized (objRef) {
            // Statements to be synchronized
        }


    - Here is an example:

        public void run() {
            synchronized (target) {
                target.call(msg);
            }
        }


    - A full example is located in '/code/ch11/SynchBlock.java'.



- Interthread Communication

    - Let's say we have a classic queueing problem, where one thread is producing some
        data and another is consuming it.  Suppose the producer has to wait until the 
        consumer was finished consuming before adding more data.  

      The consumer wastes CPU cycles polling for the producer to finish.  Once the
        producer is finished, it starts wasting CPU cycles polling for the consumer to
        finish.


    - To avoid polling, Java has an elegant interprocess communication mechanism using the
        'wait()', 'notify()', and 'notifyAll()' methods.  These methods are implemented
        as final methods on the 'Object' class, so all classes have them.

        final void wait() throws InterruptedException
        final void notify()
        final void notifyAll()


    - Although wait() normally waits until notify() or notifyAll() is called, there is a 
        possibility that in very rare cases the waiting thread could be awakened due to a 
        spurious wakeup.  In this case, a waiting thread resumes without notify() or notifyAll()
        having been called. (In essence, the thread resumes for no apparent reason.)

      Because of this remote possibility, the Java API documentation recommends that calls to 
        wait() should take place within a loop that checks the condition on which the thread is 
        waiting.


    - Without using these methods, as in '/code/ch11/WrongProducerConsumer.java', nothing stops
        the producer from overrunning the consumer, and nothing stops the consumer from consuming 
        the same value twice.  So, we get erroneous output.

        Put: 1
        Got: 1
        Got: 1
        Got: 1
        Got: 1
        Got: 1
        Put: 2
        Put: 3
        Put: 4
        Put: 5
        Put: 6
        Put: 7
        Got: 7


    - If we use wait() and notify() to signal in both directions, as in 
        '/code/ch11/ProducerConsumer.java', we will get the correct output:

        Put: 1
        Got: 1
        Put: 2
        Got: 2
        Put: 3
        Got: 3
        Put: 4
        Got: 4
        Put: 5
        Got: 5



- Deadlock

    - Deadlock occurs when 2 threads have a circular dependency on a pair of synchronized
        objects.  It is difficult to debug for 2 reasons:

        1. It may occur only rarely, when 2 threads time slice in just the right way.

        2. It may involve more than 2 threads and more than 2 synchronized objects.


    - An example of creating a deadlock condition is located at '/code/ch11/Deadlock.java'.