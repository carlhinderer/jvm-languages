-----------------------------------------------------------------------
|  CHAPTER 8 - INHERITANCE                                            |
-----------------------------------------------------------------------

- Inheritance Basics

    - In Java, the class being inherited is the 'superclass'.  The class inheriting from
        it is the 'subclass'.  


    - A superclass is inherited by the subclass by using the 'extends' keyword.

        class A {
            int i, j;
        
            void showij() {
                System.out.println("i and j: " + i + " " + j);
            }
        }
        
        class B extends A {
            int k;
        
            void showk() {
                System.out.println("k: " + k);
            }
        
            void sum() {
                System.out.println("i+j+k= " + (i+j+k));
            }
        }


    - A subclass can access any public members of its superclass.  However, it cannot
        access private members of its superclass.


    - A more concrete example is included at 'code/ch08/BoxWeightDemo.java'.



- A Superclass Variable can Reference a Subclass Object

    - A reference variable of a superclass can be assigned to any subclass derived from
        that superclass.

        Box plainBox = new Box();
        BoxWeight weightBox = new BoxWeight(10, 12, 5, 25.0);

        plainBox = weightBox;



- Using 'super' to Call a Superclass Constructor

    - Here, we reduce duplicated code by calling the superclass constructor:

        class BoxWeight extends Box {
            double weight;

            BoxWeight(double w, double h, double d, double m) {
                super(w, h, d);
                weight = m;
            }
        }



- Using 'super' when Superclass and Subclass Have the Same Members

    - The second form of 'super' acts somewhat like 'this', but it always refers to 
        the superclass of the subclass in which it is used.


    - This form of 'super' is used in situations where the subclass hides members of the
        same name in a superclass.

        class A {
            int i;
        }

        class B extends A {
            int i;    // This hides the i in A

            B(int a, int b) {
                super.i = a;
                i = b;
            }

            void show() {
                System.out.println("i in superclass: " + super.i);
                System.out.println("i in subclass: " + i);
            }
        }



- Creating a Multilevel Hierarchy

    - We can create hierarchies that have as many levels of inheritance as we like.

        class Box {
            private double width;
            private double height;
            private double depth;

            Box (double w, double h, double d) {
                width = w;
                height = h;
                depth = d;
            }
        }

        class BoxWeight extends Box {
            double weight;

            BoxWeight (double w, double h, double d, double m) {
                super(w, h, d);
                weight = m;
            }
        }

        class Shipment extends BoxWeight {
            double cost;

            Shipment (double w, double h, double d, double m, double c) {
                super(w, h, d, m);
                cost = c;
            }
        }



- When Constructors are Executed

    - This raises the question of in which order are the constructors executed?
        In a class hierarchy, the constructors are called from superclass to subclass.

        class A {
            A() {
                System.out.println("Inside A's Constructor");
            }
        }
        
        class B extends A {
            B() {
                System.out.println("Inside B's Constructor");
            }
        }
        
        class C extends B {
            C() {
                System.out.println("Inside C's Constructor");
            }
        }
        
        
        class CallingConstructors {
            public static void main(String args[]) {
                C c = new C();
            }
        }


    - If 'super()' is called explicitly, it must be the first statment used in the
        subclass constructor.  So, whether 'super()' is explicitly called or not, the
        order of constructors is the same, in the order of derivation.



- Method Overriding

    - In a class hierarchy, when a method in a subclass has the same name and type
        signature as a method in its superclass, the method in the subclass 'overrides'
        the method in the superclass.

        class A {
            void show() {
                System.out.println("show() in A");
            }
        }

        class B extends A {
            void show() {
                super.show();    // This calls A's show()
                System.out.println("show() in B");
            }
        }



- Dynamic Method Dispatch

    - The above example is of limited usefulness.  The reason method overriding is so
        important in Java is that it enables 'dynamic method dispatch'.  

      This is the mechanism that allows the call to an overridden method to be resolved
        at run time.  This is how Java implements run-time polymorphism.


    - Here is an example, where B and C both override A.

        class A {
            void callme() {
                System.out.println("Here in A.");
            }
        }

        class B extends A {
            void callme() {
                System.out.println("Here in B.");
            }
        }

        class C extends A {
            void callme() {
                System.out.println("Here in C.");
            }
        }


        class Dispatch {
            public static void main(String args[]) {
                A a = new A();
                B b = new B();
                C c = new C();

                A r;
                r = a;
                r.callme();

                r = b;
                r.callme();

                r = c;
                c.callme();
            }
        }


    - A more realistic example is included at 'code/ch08/FindAreas.java'.



- Using Abstract Classes

    - There are situations in which you want to define a superclass that declares the
        structure of an abstraction without providing a complete implementation of
        every method.


    - Often, there will be a case in which defining the method in the superclass makes
        no sense (like with the Figure's 'area()' method).  You can handle this in 2 ways:

        1. You can have it report a warning message (like above).

        2. You can make it an abstract method, requiring subclasses to implement it.


        abstract class A {
            abstract void callme();
        }


    - An abstract class cannot be directly instantiated.  Any subclass of an abstract class
        must either implement all the abstract methods or be declared 'abstract' itself.


    - An abstract class cannot have constructors or abstract methods.


    - Abstract classes can implement concrete methods also.  They can include as much 
        implementation as they see fit.

        abstract class A {
            abstract void callme();

            void callMeToo() {
                System.out.println("Concrete method.");
            }
        }



- Using 'final' to Prevent Overriding

    - There are 3 uses of the 'final' keyword in Java:

        1. Creating a named constant.

        2. Using it to prevent overriding.

        3. Using it to prevent inheritance.


    - Using 'final' to prevent overriding:

        class A {
            // This method cannot be overridden
            final void meth() {
                Sys
            }
        }


    - Note that declaring methods 'final' can sometimes provide a performance enhancement.
        The compiler is free to inline calls, because it knows they will not be overridden
        by a subclass.  

      Normally, Java resolves to method calls dynamically, using 'late binding'.  In this
        case, they can be resolved at compile time, using 'early binding'.



- Using 'final' to Prevent Inheritance

    - Sometimes you may want to prevent a class from being subclassed.  To do this,
        you can declare the class 'final'.  This also implicitly declares all of its
        methods 'final' also.

        final class A {
            ...
        }

        // This will cause an error
        class B extends A {
            ...
        }
