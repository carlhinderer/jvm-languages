-----------------------------------------------------------------------
|  CHAPTER 3 - DATA TYPES, VARIABLES, & ARRAYS                        |
-----------------------------------------------------------------------

- Java is Strongly Typed

    - Every variable and expression has a type.
    - All assignments are checked for type compatibility.
    - There are no automatic type coercions.
    - Types are checked at compilation time.



- Primitive Types

    - 8 Primitive Types

        byte
        short
        int
        long
        char
        float
        double
        boolean


    - Integer Types

        - In C and C++, the size of an integer varied based on the execution environment.  In
            Java, an int is always 32-bit.

        - byte      = 8 bits    (-128 to 127)
          short     = 16 bits   (-32,768 to 32,767)
          int       = 32 bits   (-2,147,483,648 to 2,147,483,647)
          long      = 64 bits   (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)


    - Floating Point Types

        - float     = 32 bits   (1.4e-045 to 3.4e+038)
          double    = 64 bits   (4.9e-324 to 1.8e+308)

        - All transcendental math functions (sin(), cos(), tan(), etc.) return doubles.


        class Area {
          public static void main(String args[]) {
            double pi, r, a;

            r = 10.8;
            pi = 3.1416;
            a = pi * pi * r;

            System.out.println("Area of the circle is " + a);
          }
        }


    - Characters

        - Java uses Unicode to represent characters.
        - When Java was created, Unicode characters were 16 bits.  So, Java chars are 16 bits.


        class CharDemo {
          char c1, c2;

          c1 = 88;   // ASCII code for 'X'
          c2 = 'Y';

          System.out.print("c1 and c2: ");
          System.out.println(c1 + " " + c2);
        }


    - Booleans

        - Can be used in tests.

            b = true;
            if (b) System.out.println("True");



- Literals

    - Integers

        - Different Bases

            // Octal
            089
    
            // Hex
            0xff OXFF
    
            // Binary
            0b1010 0B1010


        - To create a long literal, append with an 'L':

            0x7ffffffffffffffL
            23372036854775807L


        - To make a number more readable, you can add underscores in it.

            int x = 123_456_789;
            int x = 123___456___789;
            int x = 0b1101_0101_0001_1010;


    - Floating-Point Literals

        - Floating-point literals default to double precision.  To specify a float, you
            append an 'F' or 'f' to the constant.


        - Underscores can be added to floating point literals also.

            double num = 9_423_497_862.0;
            double num = 9_423_497.1_0_9;


    - Character Literals

        - Must be in single quotes.


        - Common Escape Sequences

            \ddd           // Octal character
            \uxxxx         // Hex Unicode character

            \'             // Single Quote
            \"             // Double Quote
            \\             // Backslash

            \r             // Carriage Return
            \n             // New line (Line Feed)
            \f             // Form Feed
            \t             // Tab
            \b             // Backspace



- Variables

    - Variable Basics

        - Variables have block scope.


        - There are 2 cases where automatic type conversion occurs:

            1. The 2 data types are compatible
            2. The destination type is larger than the source type.


        - Otherwise, you need to perform an explicit type conversion.

            int a;
            byte b;
            b = (byte) a;

            int a;
            long b;
            a = (int) b;  // Truncation


        - Automatic type promotion

            byte a = 50;
            byte b = 40;
            int c = a + b;



- Arrays

    - 1D Arrays

        - In Java, the 'new' operator is used to allocate memory.


        - When the array is initialized, all of the elements are set to the default
            (in this case 0):

            // Declare new array
            int month_days[];

            // Allocate memory for array
            month_days = new int[12];

            // Declare and allocate together
            int month_days = new int[12];


            // Get item
            month_days[0]
            // 0

            // Set item
            month_days[0] = 31;
            month_days[1] = 28;


            // Array Initializer
            int month_days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};


        - Java strictly checks to make sure you don't try to get/set outside of array bounds
            at runtime.


    - Multidimensional Arrays

        - Arrays can have any number of dimensions.

            // 2D Array
            int twoD[][] = new int[4][5];


        - You can allocate the first dimension, and allocate second dimension separately.

            // Allocate 1st dimension
            int twoD[][] = new int[4][];

            // Allocate 2nd dimension
            twoD[0] = new int[5];
            twoD[1] = new int[5];
            twoD[2] = new int[5];
            twoD[3] = new int[5];


        - Two-dimensional array initialization:

            double m[][] = {
              {0, 1, 2, 3},
              {4, 5, 6, 7},
              {8, 9, 10, 11},
              {12, 13, 14, 15}
            };


        - 3D Matrix:

            int threeD[][][] = new int[3][4][5];

            for(int i=0; i<3; i++) {
              for(int j=0; j<4; j++) {
                for(int k=0; k<5; k++) {
                  threeD[i][j][k] = i * j * k;
                }
              }
            }


        - Note that we put the square brackets before the variable name also.

            // These are equivalent
            int a1[] = new int[3];
            int[] a1 = new int[3];

            // These are equivalent
            char twoD[][] = new char[3][4];
            char[][] twoD = new char[3][4];

            // These are equivalent
            int[] nums1, nums2, nums3;
            int nums1[], nums2[], nums3[];