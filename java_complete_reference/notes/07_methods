-----------------------------------------------------------------------
|  CHAPTER 7 - CLASSES & METHODS                                      |
-----------------------------------------------------------------------

- Overloading Methods

    - Java support 'method overloading', which allows you to define 2 methods with the
        same name, as long as they have different parameters.  This is one of the
        ways Java supports polymorphism.

        class OverloadDemo {
            void test() { ... }

            void test(int a) { ... }

            void test(int a, int b) { ... }

            void test(double a) { ... }
        }


    - Polymorphism example - Absolute values

        // Java's standard library Math class
        int abs(int n) { ... }
        double abs(double d) { ... }
        float abs(float f) { ... }



- Overloading Constructors

    class Box {
        double width;
        double height;
        double depth;

        // All dimensions specified
        Box(double w, double h, double d) {
            width = w;
            height = h;
            depth = d;
        }

        // No dimensions specified
        Box() {
            width = -1;
            height = -1;
            depth = -1;
        }

        // Used for cubes
        Box(double side) {
            width = side;
            height = side;
            depth = side;
        }
    }



- Using Objects as Parameters

    class Test {
        int a, b;

        Test(int i, int j) {
            a = i;
            b = j;
        }

        boolean equalTo(Test o) {
            return o.a == a && o.b == b;
        }
    }

    class TestEquality {
        public static void main(string args[]) {
            Test obj1 = new Test(100, 22);
            Test obj2 = new Test(100, 22);

            System.out.println("obj1 == obj2: " + obj1.equalTo(obj2));
        }
    }



- Argument Passing

    - Primitive types are passed by value.  What occurs inside the method body does not
        change the value of the variable.

    - Objects are passed by reference.  What occurs inside the method does change their
        value.



- Returning Objects

    class Test {
        int a;

        Test(int i) {
            a = i;
        }

        Test incrByTen() {
            return new Test(a + 10);
        }
    }



- Recursion

    class Factorial {
        int fact(int n) {
            if(n == 1)
                return n;
            else
                return fact(n-1) * n;
        }
    }



- Access Control

    - Members marked 'private' can only be used by other members of its class.

        class Box {
            private double width;
            private double height;
            private double depth;

            Box(double w, double h, double d) {
                width = w;
                height = h;
                depth = d;
            }

            // public is the default
            int volume() {
                return width * height * depth;
            }
        }



- Understanding 'static'

    - The 'static' keyword creates a class member that will be used independently of
        any object of that class.  Both variables and methods can be declared static.


    - A static member can be used before any instances of the class are created.  For
        instance, the 'main' method is always static, since it must be called before
        any objects exist.


    - Instance variables declared static are essentially global variables.


    - Static methods have several restrictions:

        1. They can only directly call other static methods of their class.
        2. They can only directly access static variables of their class.
        3. They cannot refer to 'this' or 'super' in any way.


    - Here is an example:

        class UseStatic {
            static int a = 3;
            static int b;

            // This is run when the class is loaded
            static {
                b = a * 4;
            }

            static void meth(int c) {
                System.out.println("a: " + a);
                System.out.println("b: " + b);
                System.out.println("c: " + c);
            }
        }

        UseStatic.meth(42);



- The 'final' Keyword

    - A field can be declared a constant with the 'final' keyword.  Doing so prevents it
        from being modified.  You must either give it a value when it is declared or in a
        constructor.

        final int FILE_NEW = 1;
        final int FILE_OPEN = 2;
        final int FILE_SAVE = 3;
        final int FILE_SAVEAS = 4;
        final int FILE_QUIT = 5



- Arrays Revisited

    - Arrays are implemented as objects.  They have a 'length' instance variable, which
        is very useful.

        class ArrayLength {
            public static void main(String args[]) {
                int a1[] = new int[10];

                System.out.println("Length: " + a1.length);
            }
        }



- Nested and Inner Classes

    - A 'nested class' is a class defined inside another class.  The nested class
        can access the members of the enclosing class, but the enclosing class cannot
        access the members of the nested class.


    - There are both static and non-static nested class.  A non-static nested class is
        called an 'inner class'.


    - Here is an example:

        class Outer {
            int outerX = 100;
        
            void test() {
                Inner inner = new Inner();
                inner.display();
            }
        
            class Inner {
                void display() {
                    System.out.println("Here is outerX: " + outerX);
                }
            }
        }

        class InnerClassDemo {
            public static void main(String args[]) {
                Outer outer = new Outer();
                outer.test();
            }
        }


    - Actually, an inner class can be created in any block scope.

        for(int i=0; i<5 i++) {
            class Inner {
                void display() {
                    System.out.println("Inner class in a block.");
                }
            }

            Inner inner = new Inner();
            inner.display();
        }



- The 'String' Class


- Using Command-Line Arguments


- Variable-Length Arguments with Varargs


- Overloading Vararg Methods


- Varargs and Ambiguity


- Local Variable Type Inference with Reference Types