-----------------------------------------------------------------------
|  CHAPTER 9 - PACKAGES & INTERACES                                   |
-----------------------------------------------------------------------

- Packages

    - Packages are containers for classes.  They are used to keep the class name space 
        compartmentalized.  

      For instance, you can create a class named 'List' in your own package without 
        worrying that it will collide with some other class named 'List' elsewhere.


    - Packages are stored in a hierarchical manner and are explicitly imported into new
        class definitions.  


    - Packages are both a naming and visibility control mechanism.  You can define classes
        inside a package that are not accessible outside of the package.



- Defining a Package

    - To create a package, you simply include a 'package' command as the first statement
        in a Java source file.  The 'package' statement defines a namespace in which 
        packages are stored.


    - If you omit the 'package' statement, class names are put into the default package,
        which has no name (this is what we have been doing so far).  This is fine for
        small test applications, but most real applications will put classes into
        packages.


    - This is the general form of the package statement:

        package mypackage;


    - Typically, Java uses file system directories to store packages, and that is the 
        approach assumed by the examples here.  The .class files that you create for
        any classes in the 'mypackage' package must be stored in a directory called
        'mypackage'.


    - You can create a hierarchy of packages.  To do so, simply generate each package
        name from the one above it using a period.

      For instance, the package 'a.b.c' should be stored in the 'a/b/c' directory.



- Finding Packages and CLASSPATH

    - How does the Java run-time system know where to look for the packages you create?
        For the examples in this chapter, the answer has 3 parts.

        1. By default, the Java run-time system uses the current working directory as 
             a starting point.  If your package is a subdirectory of the current 
             directory, it will be found.

        2. You can specify a directory path or paths by setting the CLASSPATH environment
             variable.

        3. You can use the -classpath option with java and javac to specify the path to
             your classes.

        (4.) Beginning with JDK 9 (this will be covered in Chapter 16), a package can be 
               part of a module, and thus found on the module path.


    - For example, in order to find 'mypack', 

        1. The program can be executed from a directory immediately above 'mypack'.

        2. OR the CLASSPATH must be set to include 'mypack'

        3. OR the -classpath option must specify the path to 'mypack' when the program
             is run via java.



- Package Example

    - First, create a new file 'AccountBalance.java' in a 'mypack' directory.

        // mypack/AccountBalance.java
        ---------------------------------------------
        package mypack;

        class Balance {
            ...
        }

        class AccountBalance {
            public static void main(String args[]) { ... }
        }


    - Now, compile it.  The resulting .class files should also be in the 'mypack' directory.

        // Compile the classes
        ch09 $ javac mypack/AccountBalance.java

        // Run the program
        ch09 $ java mypack.AccountBalance

        // This won't work, since it's not qualified with the package name
        ch09 $ java AccountBalance



- Packages and Member Access

    - Packages add another dimension to access control.  As it relates to the interplay
        between classes and packages, Java addresses 4 categories of visibility for class
        members:

        1. Subclasses in the same package

        2. Non-subclasses in the same package

        3. Subclasses in different packages

        4. Classes that are neither in the same package nor subclasses


    - Class Member Access

                                          Private    No Modifier    Protected    Public
        ------------------------------------------------------------------------------------
        Same class                        Yes        Yes            Yes          Yes

        Same package subclass             No         Yes            Yes          Yes

        Same package non-subclass         No         Yes            Yes          Yes

        Different package subclass        No         No             Yes          Yes

        Different package non-subclass    No         No             No           Yes


    - Anything declared 'public' can be accessed from different classes and different
        packages.  Anything declared 'private' cannot be seen outside of its class.

      When a member does not have an explicit access specification, it is visible to
        subclasses, as well as other classes in the same package.  This is the default.

      If you want to allow an element to be seen outside your current package, but only
        classes that subclass your class directly, you use 'protected'.



- Importing Packages

    - Given that packages are a good way of compartmentalizing classes from each other, 
        Java stores all of it's core classes in them.  There are no core classes in the
        Java default package.


    - Since typing out the entire package name can be tedious, Java provides the 'import'
        statement to bring certain classes, or entire packages, into visibility.

      Once imported, the class can be referred to directly, using only its name.  It is
        a convenience, not technically necessary to write a complete Java program.

        import pkg1 [.pkg2].(classname | *);

        import java.util.Date;
        import java.io.*;


    - All of the standard Java SE classes included with Java begin with the name 'java'.



- Interfaces

    - The keyword 'interface' fully abstracts a class's interface from its implementation.
        Once the interface is defined, any number of classes can implement it.  Also, a
        class can implement any number of interfaces.


    - To implement an interface, a class must provide the complete set of methods required
        by an interface.  Interfaces allow you to fully utilize the 'one interface, multiple
        methods' aspect of polymorphism.

    
    - Interfaces are designed to support dynamic method resolution at run time.  Normally,
        in order for one class method to be called from another class, both classes need
        to be present at compile time.

      Interfaces are designed to avoid this problem.



- Defining an Interface

    - Interfaces look similar to classes:

        access interface name {
            type final-varname = value;
            ...
            return-type method-name (paramlist);
        }


    - Here is an example:

        interface Callback {
            void callback(int param);
        }


    - Beginning with JDK 8, it is possible to add a default implementation to an 
        interface method.


    - JDK 8 also added static interface methods, and JDK 9 allows for private interface
        methods.


    - Variables included in interfaces are implicitly final and static, meaning they must
        be initialized and cannot be changed by the implementing class.



- Implementing Interfaces

    - To implement an interface, the 'implements' clause is used in the class definition.
        Methods implemented by a class must be declared 'public'.

        class Client implements Callback {
            public void callback(int n) {
                System.out.println("callback called with " + p);
            }
        }



- Accessing Implementations Through Interface References

    - You can declare variables as object references that use an interface rather than
        a class type.

        Callback c = new Client();
        c.callback(42);


    - Note that the interface variable can only call members of the interface type.  It
        cannot access non-interface members of the class.



- Partial Imlementations

    - If a class includes an interface but does not fully implement the methods required
        by that interface, the class must be declared 'abstract'.

        abstract class Incomplete implements Callback {
            int a, b;

            void show() {
                System.out.println(a + " " + b);
            }
        }


    - Any class that inherits 'Incomplete' must either implement the 'Callback' interface
        or be declared abstract itself.



- Nested Interfaces

    - An interface can be declared a member of a class or another interface.  Such an 
        interface is called a 'member interface' or 'nested interface'.

        // This class contains a member interface
        class A {
            // This is a nested interface
            public interface NestedInterface {
                boolean isNotNegative(int x);
            }
        }
        
        // This class implements the nested interface
        class B implements A.NestedInterface {
            public boolean isNotNegative(int x) {
                return x < 0 ? false : true;
            }
        }
        
        class NestedInterfaceDemo {
            public static void main(String args[]) {
                A.NestedInterface nif = new B();
                if (nif.isNotNegative(10))
                    System.out.println("Not negative.");
            }
        }



- Applying Interfaces

    - We added an example of applying interfaces in 'code/ch09/interfaces'.  We have an
        interface, 'IntStack', and 2 classes that implement it, 'FixedStack' and 'DynStack'.



- Variables in Interfaces

    - You can use interfaces to import shared constants into multiple classes.

        import java.util.Random;

        interface SharedConstants {
            int NO = 0;
            int YES = 1;
            int MAYBE = 2;
            int LATER = 3;
            int SOON = 4;
            int NEVER = 5;
        }

        class Question implements SharedConstants {
            Random rand = new Random();

            int ask() {
                int prob = (int) (100 * rand.nextDouble());
                if(prob < 30)
                    return NO;
                else if (prob < 60)
                    return YES;
                else if (prob < 75)
                    return LATER;
                else if (prob < 98)
                    return SOON;
                else
                    return NEVER;
            }
        }



- Interfaces Can Be Extended

    - One interface can inherit from another using the 'extends' keyword.

        interface A {
            void meth1();
            void meth2();
        }

        interface B extends A {
            void meth3();
        }


        // This class must implement all of A and B
        class MyClass implements B {
            public void meth1() {
                System.out.println("Method 1.");
            }

            public void meth2() {
                System.out.println("Method 2.");
            }

            public void meth3() {
                System.out.println("Method 3.");
            }
        }



- Default Interface Methods

    - JDK 8 added the capability to add a default implementation for a method.

    
    - Methods with default implementations must be marked with the 'default' keyword:

        public interface MyInterface {
            int getNumber();

            default String getString() {
                return "Default String";
            }
        }



- Multiple Inheritance Issues

    - Java does not support multiple inheritance.  A class can support multiple 
        interfaces, but they cannot use this to save state.



- Using static Methods in an Interface

    - As of JDK 8, interfaces can now contain static methods.

        public interface MyInterface {
            int getNumber();

            default String getString() {
                return "Default String";
            }

            static int getDefaultNumber() {
                return 0;
            }
        }



- Private Interface Methods

    - As of JDK 9, interfaces can include private methods.  A private interface method
        can only be called by a default method or another private method in the same
        interface.

        interface IntStack {
            void push(int item);
            int pop();

            default int[] popNElements(int n) {
                return getElements(n);
            }

            private int[] getElements(int n) {
                int[] elements = new int[n];

                for(int i=0; i<n; i++) elements[i] = pop();
                return elements;
            }
        }